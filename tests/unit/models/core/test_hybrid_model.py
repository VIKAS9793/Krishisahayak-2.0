import pytest
import torch
import torch.nn as nn
from unittest.mock import MagicMock

from krishi_sahayak.models.core.hybrid_model import HybridModel

# --- Mock Fixtures ---
@pytest.fixture
def mock_rgb_model() -> MagicMock:
    model = MagicMock(spec=nn.Module)
    model.return_value = torch.tensor([[1.0, 9.0]]) # Confident prediction for class 1
    return model

@pytest.fixture
def mock_fusion_model() -> MagicMock:
    model = MagicMock(spec=nn.Module)
    model.return_value = torch.tensor([[0.1, 0.2]]) # Low confidence prediction
    return model

@pytest.fixture
def mock_gan_model() -> MagicMock:
    # Mock the entire Pix2PixGAN module, including the nested generator
    gan = MagicMock()
    gan.generator = MagicMock(return_value=torch.randn(1, 1, 32, 32))
    return gan

class TestHybridModel:
    def test_init_rgb_only_mode(self, mock_rgb_model):
        """Verify initialization in RGB-only mode without a fusion model."""
        model = HybridModel(rgb_model=mock_rgb_model, fusion_model=None)
        assert model.confidence_model is None
        assert model.validator is None

    def test_init_fusion_mode(self, mock_rgb_model, mock_fusion_model):
        """Verify initialization with a fusion model creates sub-components."""
        model = HybridModel(rgb_model=mock_rgb_model, fusion_model=mock_fusion_model)
        assert model.confidence_model is not None
        assert model.validator is not None

    def test_forward_rgb_only_mode(self, mock_rgb_model):
        """Test forward pass in RGB-only mode."""
        model = HybridModel(rgb_model=mock_rgb_model, fusion_model=None)
        rgb_input = torch.randn(1, 3, 32, 32)
        logits = model(rgb=rgb_input)
        
        mock_rgb_model.assert_called_once_with(rgb_input)
        assert torch.is_tensor(logits)

    def test_forward_with_real_nir(self, mock_rgb_model, mock_fusion_model, mock_gan_model):
        """Test forward pass with provided NIR, GAN should not be called."""
        model = HybridModel(
            rgb_model=mock_rgb_model,
            fusion_model=mock_fusion_model,
            gan_model=mock_gan_model
        )
        model.confidence_model = MagicMock(return_value=(torch.randn(1, 2), {}))

        rgb_input = torch.randn(1, 3, 32, 32)
        nir_input = torch.randn(1, 1, 32, 32)
        
        model(rgb=rgb_input, nir=nir_input)
        
        # Assert GAN was NOT used, but confidence model was
        mock_gan_model.generator.assert_not_called()
        model.confidence_model.assert_called_once()

    def test_forward_with_generated_nir(self, mock_rgb_model, mock_fusion_model, mock_gan_model):
        """Test forward pass where NIR is generated by the GAN."""
        model = HybridModel(
            rgb_model=mock_rgb_model,
            fusion_model=mock_fusion_model,
            gan_model=mock_gan_model
        )
        model.confidence_model = MagicMock(return_value=(torch.randn(1, 2), {'used_fallback': True}))
        
        rgb_input = torch.randn(1, 3, 32, 32)
        
        logits, metadata = model(rgb=rgb_input, nir=None, return_metadata=True)
        
        # Assert GAN generator WAS called
        mock_gan_model.generator.assert_called_once()
        model.confidence_model.assert_called_once()
        assert metadata['used_generated_nir'] is True
        assert metadata['used_fallback'] is True

    def test_to_device(self, mock_rgb_model, mock_fusion_model, mock_gan_model):
        """Verify that the .to() method moves all sub-models to the correct device."""
        model = HybridModel(
            rgb_model=mock_rgb_model,
            fusion_model=mock_fusion_model,
            gan_model=mock_gan_model
        )
        model.to("cuda:1")
        
        mock_rgb_model.to.assert_called_with("cuda:1")
        mock_fusion_model.to.assert_called_with("cuda:1")
        mock_gan_model.to.assert_called_with("cuda:1")
